Mastering Jest Testing with TypeScript and Node.js

Build solid testing skills with Jest, TypeScript, and Node - from setup to mocks, spies, and production error handling



Section 01: Introduction


01. Important Info !!!

02. Course requirements and testing info

03. Unit testing and Jest info



Section 02: Getting started with Jest in Node & Typescript


04. Course repo
-Github repo: https://github.com/john-smilga/jest-course/

05. Project setup: TypeScript, Node.js & Jest
-open link: https://jestjs.io
-open link: https://www.npmjs.com/package/jest
-open link: https://www.npmjs.com/package/ts-node
-open link: https://www.npmjs.com/package/ts-jest
-open link: https://www.npmjs.com/package/@types/jest
-type command: mkdir 01-jest-sandbox
-type command: npm init
-type command: npm i --save-dev ts-node jest ts-jest @types/jest
-create .gitignore file
-create jest.config.ts file
-create tsconfig.json file
-create folder src and sum.ts file
-in sum.ts file create and export function sum()
-in folder src create folder __tests__ and sum.spec.ts file
-in sum.spec.ts file import function sum from sum.ts file
-invoke function describe() with two arguments
-first argument is test description and second argument is anonymous function
-type command: npx jest
-in package.json file update command test
-type command: npm run test



Section 03: Jest fundamentals


06. Test file location
-create README.md file
-copy files from folder 01-jest-sandbox
-type command: npm i
-type command: npm i --save-dev @types/node
-type command: npm test -- fileName.spec.ts
-type command: npm test -- sum.spec.ts

07. Jest syntax
-in sum.spec.ts invoke function for empty test
-type command: npm run test
-open link: https://jestjs.io/docs/expect

08. SUT and AAA

09. Utils tests
-type command: npm install --save-dev jest@29 ts-jest@29
-create utils.ts file
-in utils.ts file create and export more functions
-in folder __tests__ create utils.spec.ts file
-type command: npm run test
-in package.json file add command: test:watch
-type command: npm run test:watch
-in utils.spec.ts file import functions from utils.ts file
-invoke function describe()
-in function describe() invoke more functions it()
-type command: npm run test:watch -- utils.spec.ts

10. Class tests
-create Calculator.ts file
-in Calculator.ts file create and export class Calculator
-create calculator.spec.ts file
-in calculator.spec.ts file import class Calculator
-type command: npm run test:watch -- calculator.spec.ts

11. Jest hooks
-in calculator.spec.ts file, in function describe() create variable let sut: Calculator (system under test)
-invoke function beforeEach()
-in functions it() remove variable const calculator
-type command: npm run test:watch -- calculator.spec.ts



Section 04: Test doubles explained: Mocks, Stubs, Spies & more


12. Dummy test doubles
-type command: mkdir 03-test-doubles
-type command: cd 03-test-doubles
-create README.md file
-type command: npm init
-create files jest.config.ts and tsconfig.json
-create .gitignore file
-type command: npm i
-create folder src and index.ts file
-in folder src create folder services
-in folder services create three folders 01-books, 02-orders and 03-users with .ts files
-in folder 01-books create bookService.spec.ts file
-in bookService.spec.ts file import function getBookDisplayTitle from BookService.ts file
-invoke function describe() with two arguments
-in function describe() add test description as first argument
-invoke function it() as second argument
-in package.json file add commands test and test:watch
-type command: npm run test:watch
-type command: npm run test:watch -- bookService.spec.ts

13. Getting started with Stubs and Fakes
-in folder 02-orders create orderService.spec.ts file
-in orderService.spec.ts file import class OrderService from OrderService.ts file
-create classes InventoryServiceStub and class FakePaymentGateway
-type command: npm run test:watch -- orderService.spec.ts

14. Stubs and Fakes in action
-in orderService.ts file invoke function describe()
-in functions describe() invoke more functions it ()
-type command: npm run test:watch -- orderService.spec.ts

15. Refactor challenge
-in orderService.spec.ts file create type Transaction
-refactor class FakePaymentGateway
-refactor logic in function describe()
-type command: npm run test:watch -- orderService.spec.ts

16. Using Spies in Jest with jest.spyOn()
-create folder mocks and 01-example.spec.ts file
-in 01-example.spec.ts file create variable object const user
-invoke function describe()
-in function describe() invoke three functions it()
-in functions it() invoke functions jest.spyOn()
-type command: npm run test:watch -- 01-example.spec.ts

17. Clearing and resetting mocks in Jest
-in folder mocks create 02-example-spec.ts file
-in 02-example-spec.ts file create variable object const user
-invoke function describe()
-in function describe() create variable let roleSpy with type
-invoke function beforeEach()
-invoke two functions it()
-invoke function afterEach()
-type command: npm run test:watch -- 02-example.spec.ts

18. UserService testing setup: spying with Jest begins
-type command: npm run dev

19. Jest spyOn in action - successful UserService response
-create userService.spec.ts file
-in userService.spec.ts file import classes UserService, DatabaseService and NewsletterService
-type command: npm run test:watch -- userService.spec.ts
-invoke function describe()
-add to function describe() two arguments
-first argument is test description and second argument is anonymous callback function
-in callback function create five variables
-invoke function it() with description - should successfully register user and return success message
-comment function it()
-create variables let createUserSpy and let subscribeUserSpy with types
-invoke functions beforeEach() and afterEach()
-invoke function it() with description - should successfully register user and return success message

20. Simulating errors with jest.spyOn() in Jest tests
-in userService.spec.ts file invoke function it() with description - should return error message if name is not provided
-type command: npm run test:watch -- userService.spec.ts
-invoke function it() with description - should return error message if email value is not test@test.com

21. Mocking modules with jest.mock()
-create user.spec.ts file
-in user.spec.t file import variable user from user.ts file
-invoke function describe() with two arguments
-first argument is test description and second argument is anonymous callback function
-in callback function invoke function it() with description - mocks single method using jest.fn()
-comment code in function it() and invoke new function it() with same description
-invoke function jest.mock('./user')
-invoke function it () with description - shows mock gotcha
-type command: npm run test:watch -- user.spec.ts

22. Mock external third party and Node's built-in modules
-create folder modules and externalModules.spec.ts file
-in externalModules.spec.ts file import module fs
-invoke function jest.mock()
-invoke function describe() with two arguments
-first argument is test description and second argument is anonymous callback function
-in callback function invoke function it() with description - should mock file reading
-invoke function it() with description - should spy on file reading
-type command: npm run test:watch -- externalModules.spec.ts



Section 05: How to test for thrown errors in Jest


23. Jest Error handling: first steps
-type command: mkdir 04-testing-errors
-add starter folder and files
-in folder 01-users create UserService.spec.ts file
-type command: npm run test:watch -- UserService.spec.ts
-in UserService.spec.ts file import classes UserService, NewsletterService and DatabaseService
-invoke function describe() with two arguments
-first argument is test name - UserService
-second argument is anonymous callback function
-in callback function create four variables
-create two variables let createUserSpy and let subscribeUserSpy with types
-invoke functions beforeEach() and afterEach()
-invoke function it() with description - should successfully register user and return success message

24. Exploring error testing strategies
-invoke function it with description - should throw error message if name is not provided
-type command: npm run test:watch -- UserService.spec.ts

25. Jest: Testing custom thrown errors
-open link: https://www.npmjs.com/package/chalk
-in UserService.ts file import classes from folder utils
-invoke methods CustomLogger.info() and CustomError.throwError()
-in UserService.spec.ts file update function it() with description - should return error message if name is not provided
-update block catch (error)
-type command: npm run test:watch -- UserService.spec.ts